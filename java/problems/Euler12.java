package problems;

import common.PrimeDecomposition;

public class Euler12 {

    /*
    Highly divisible triangular number
    Problem 12

    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
     */

    public long solution() {
        int i = 1;
        int tn;
        while (true) {
            tn = triangleNumber(i);
            if (numberOfDivisors(tn) > 500) {
                break;
            }
            i++;
        }
        return tn;
    }

    private int triangleNumber(int N) {
        return (N * (N+1)) / 2;
    }

    private int numberOfDivisors(int N) {
        // If we consider numbers in terms of their prime decomposition,
        // counting the divisors becomes easy.
        // For a number decomposed as (2^3)*(3^1)*(7^5), we will have
        // (3+1)*(1+1)*(5+1) divisors.
        PrimeDecomposition d = new PrimeDecomposition(N);
        int number = 1;
        for (long prime : d.coefficients.keySet()) {
            number *= (d.coefficients.get(prime) + 1);
        }
        return number;
    }
}
