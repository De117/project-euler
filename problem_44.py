# Problem 44 (Pentagon numbers)
# =============================
#
# Pentagonal numbers are generated by the formula, P_n=n(3n−1)/2.
# The first ten pentagonal numbers are:
#
#     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
# However, their difference, 70 − 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their
# sum and difference are pentagonal and D = |Pk − Pj| is minimised;
# what is the value of D?
import sys

def pentagonal(n: int):  # n >= 0
    return n*(3*n - 1) // 2

def is_pentagonal(n: int):
    origin = (1 + (1 + 24*n)**0.5) / 6
    rounded = round(origin)
    return origin - rounded < 1e-14 and n == pentagonal(rounded)


if __name__ == "__main__":

    i = 0
    while True:
        i += 1
        P_i = pentagonal(i)

        for j in range(1, i):
            P_j = pentagonal(j)

            if is_pentagonal(P_i + P_j) and is_pentagonal(P_i - P_j):
                print(abs(P_j - P_i))
                sys.exit(0)

    # The solution is (7042750, 1560090) with difference 5482660, and this
    # finds it... But there is no proof that it's indeed the minimal one,
    # and the program is therefore not (yet) correct.
